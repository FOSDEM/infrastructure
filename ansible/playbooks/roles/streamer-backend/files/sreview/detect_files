#!/usr/bin/perl -w

# Sreview, a web-based video review and transcoding system
# Copyright (c) 2016-2017, Wouter Verhelst <w@uter.be>
#
# Sreview is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License along with this program.  If not, see
# <http://www.gnu.org/licenses/>.

use strict;
use warnings;

use DBI;

use Net::Domain qw(hostname);

our $config;
require '/etc/sreview/config.pl';

my $dbh = DBI->connect($config->{dbistring}, '', '') or die "Cannot connect to database!";

$dbh->begin_work;

my $exists = $dbh->prepare("SELECT count(*) FROM raw_files WHERE filename = ?");
my $add = $dbh->prepare("INSERT INTO raw_files(filename, room, starttime, endtime) VALUES (?, (SELECT id FROM rooms WHERE altname = ? OR name = ?), ?::timestamptz, ?::timestamptz + ?::interval)");
my $update = $dbh->prepare("UPDATE raw_files SET endtime = starttime + ?::interval WHERE filename = ?");

my @files = glob($config->{inputglob});

my $host = hostname() . ".video.fosdem.org";

foreach my $file(@files) {
	next unless (-f $file);
	my $ext = $config->{inputext};
	my $parsesub = $config->{parse_raw};
	my ($room, $start_day, $start_hour, $url) = &$parsesub($file, $host);
	next unless defined($room);
	$exists->execute($url);
	my $row = $exists->fetchrow_hashref;
	open INFO, "ffprobe $file|";
	my $length;
	while(my $line = <INFO>) {
		next unless $line =~ /Duration: ([0-9]+:[0-9]+:[0-9]+.[0-9]+)/;
		$length = $1;
	}
	close INFO;
	if($row->{count} eq '0') {
		$add->execute($url, $room, $room, "$start_day $start_hour", "$start_day $start_hour", $length);
	} else {
		$update->execute("$length", $url);
	}
}

my $full = $dbh->prepare("UPDATE talks SET state = 'files_found' WHERE state < 'files_found' AND id IN (select talkid FROM raw_talks WHERE talks_length <= (raw_total + '5 seconds'::interval))");
$full->execute();
my $partial = $dbh->prepare("UPDATE talks SET state = 'partial_files_found' WHERE state < 'partial_files_found' AND id IN (select distinct talkid FROM raw_talks)");
$partial->execute();

$dbh->commit;
