---
- name: install lxc package
  apt: pkg=lxc state=latest
  with_items:
    - lxc

# We currently have a few issues:
# - jessie containers on jessie with lxc 2 are broken: https://github.com/lxc/lxc/issues/979
# - jessie doesn't have lxc-dev and liblxc1 packages for lxc 1
# - ansible's lxc_container module depends on lxc-python2, whcih needs liblxc and lxc-dev to be installed
#
# This means we have to choose between broken containers managed by ansible's
# lxc_container module, or working containers the hardcore way. We chose the
# latter option.
#
# Should this situation ever change, this whole thing should be revised.

# Configure the macvlan bridge

- name: check if {{ macvlan_dev }} exists
  command: ip link show {{ macvlan_dev }}
  register: macvlan_exists
  failed_when: false
  changed_when: false

- name: configure {{ macvlan_dev }}
  command: ip link add {{ macvlan_dev }} link {{ macvlan_link }} type macvlan mode bridge
  when: macvlan_exists.rc != 0

- name: bring up {{ macvlan_dev }}
  command: ip link set {{ macvlan_dev }} up
  changed_when: false # this is technically not correct, but meh

# Configure the template container
#
# What can not be done (easily) from outside the chroot is done with the setup
# script which is copied to the target chroot. Make sure to check this script so
# you know what's going on there

- set_fact: lxc_path=/var/lib/lxc
- set_fact: template_name=vocto-template
- set_fact: template_path={{lxc_path}}/{{template_name}}
- set_fact: template_rootfs={{template_path}}/rootfs

- name: check if we already have a template container
  shell: lxc-ls | grep ^{{template_name}}$
  register: template_installed
  failed_when: false
  changed_when: false

- name: create a container to use as a template
  shell: lxc-create -n {{template_name}} -t debian -- -r jessie
  environment:
    MIRROR: http://httpredir.debian.org/debian
  when: "template_installed.rc != 0"
  register: template_created

- name: create .ssh directory for root
  file: path={{template_rootfs}}/root/.ssh state=directory owner=root group=root mode=0777

- name: ansible ssh key for user root
  authorized_key: user=root key="{{ lookup('file', '../public_keys/ansible.pub') }}" path={{template_rootfs}}/root/.ssh/authorized_keys manage_dir=no
  register: root_key_ansible

- name: user ssh keys for user root
  authorized_key: user=root key="{{ lookup('file', '../public_keys/'+item+'.pub') }}" path={{template_rootfs}}/root/.ssh/authorized_keys manage_dir=no
  with_items: "{{ ssh_users }}"
  register: root_key_users

- name: configure debian-multimedia repository
  copy: dest={{template_rootfs}}/etc/apt/sources.list.d/debian-multimedia.list content="deb http://www.deb-multimedia.org jessie main non-free"
  register: multimedia_repository

- name: configure c3voc repository
  copy: dest={{template_rootfs}}/etc/apt/sources.list.d/c3voc.list content="deb http://c3voc.de/voctomix jessie non-free"
  register: c3voc_repository

- name: copy the setup file
  copy: src=vocto-template/setup-commands dest={{template_rootfs}}/root/setup owner=root group=root mode=0755
  register: setup_file

- name: install voctomix
  git: repo=https://github.com/voc/voctomix.git dest={{template_rootfs}}/opt/voctomix/ clone=yes version=d8f80a7ebbf5a654b8c2591e8240479a4d2797e0
  register: voctomix_installed

- name: install vocto units
  copy: src={{item}} dest={{template_rootfs}}/etc/systemd/system/ owner=root group=root mode=0644
  with_fileglob:
  - ../files/units/*
  register: units_installed

- name: execute the setup (installs packages, enables units)
  command: chroot {{template_rootfs}} /bin/sh -c "/root/setup"
  register: setup_commands
  changed_when: setup_commands.stdout != "no changes"
  failed_when: setup_commands.stderr != ""

- set_fact: container_template_changed={{ (template_created.changed or root_key_ansible.changed or root_key_users.changed or multimedia_repository.changed or c3voc_repository.changed or setup_file.changed or voctomix_installed.changed or units_installed.changed or setup_commands.changed) | ternary(true, false) }}

- name: clone the template once per room
  include: create_voctocontainers_clone.yml
  with_items: "{{ vocto_container_config }}"
  loop_control:
    loop_var: clone_config
  when: "clone_config.voctohost == ansible_hostname"

